// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"account/internal/biz/account/v1"
	v1_2 "account/internal/biz/relation/v1"
	"account/internal/conf"
	"account/internal/data"
	"account/internal/server"
	"account/internal/service/account/v1"
	service2 "account/internal/service/relation/v1"
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
)

// Injectors from wire.go:

// initApp init kratos application.
func initApp(confServer *conf.Server, confData *conf.Data, logger log.Logger) (*kratos.App, func(), error) {
	dataData, cleanup, err := data.NewData(confData, logger)
	if err != nil {
		return nil, nil, err
	}
	accountRepo := data.NewAccountRepo(dataData, logger)
	accountUsecase := v1.NewAccountUsecase(accountRepo, logger)
	accountService := service.NewAccountService(accountUsecase, logger)
	friendRelationRepo := data.NewFriendRelationRepo(dataData, logger)
	friendRelationUsecase := v1_2.NewFriendRelationUsecase(friendRelationRepo, logger)
	friendRelationService := service2.NewFriendRelationService(friendRelationUsecase, logger)
	grpcServer := server.NewGRPCServer(confServer, accountService, friendRelationService, logger)
	app := newApp(logger, grpcServer)
	return app, func() {
		cleanup()
	}, nil
}
