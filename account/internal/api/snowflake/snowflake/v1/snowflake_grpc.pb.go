// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: internal/api/snowflake/snowflake/v1/snowflake.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SnowflakeClient is the client API for Snowflake service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SnowflakeClient interface {
	// generate snowflake id
	CreateSnowflake(ctx context.Context, in *CreateSnowflakeRequest, opts ...grpc.CallOption) (*CreateSnowflakeReply, error)
}

type snowflakeClient struct {
	cc grpc.ClientConnInterface
}

func NewSnowflakeClient(cc grpc.ClientConnInterface) SnowflakeClient {
	return &snowflakeClient{cc}
}

func (c *snowflakeClient) CreateSnowflake(ctx context.Context, in *CreateSnowflakeRequest, opts ...grpc.CallOption) (*CreateSnowflakeReply, error) {
	out := new(CreateSnowflakeReply)
	err := c.cc.Invoke(ctx, "/api.snowflake.v1.Snowflake/CreateSnowflake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SnowflakeServer is the server API for Snowflake service.
// All implementations must embed UnimplementedSnowflakeServer
// for forward compatibility
type SnowflakeServer interface {
	// generate snowflake id
	CreateSnowflake(context.Context, *CreateSnowflakeRequest) (*CreateSnowflakeReply, error)
	mustEmbedUnimplementedSnowflakeServer()
}

// UnimplementedSnowflakeServer must be embedded to have forward compatible implementations.
type UnimplementedSnowflakeServer struct {
}

func (UnimplementedSnowflakeServer) CreateSnowflake(context.Context, *CreateSnowflakeRequest) (*CreateSnowflakeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSnowflake not implemented")
}
func (UnimplementedSnowflakeServer) mustEmbedUnimplementedSnowflakeServer() {}

// UnsafeSnowflakeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SnowflakeServer will
// result in compilation errors.
type UnsafeSnowflakeServer interface {
	mustEmbedUnimplementedSnowflakeServer()
}

func RegisterSnowflakeServer(s grpc.ServiceRegistrar, srv SnowflakeServer) {
	s.RegisterService(&Snowflake_ServiceDesc, srv)
}

func _Snowflake_CreateSnowflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSnowflakeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SnowflakeServer).CreateSnowflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.snowflake.v1.Snowflake/CreateSnowflake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SnowflakeServer).CreateSnowflake(ctx, req.(*CreateSnowflakeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Snowflake_ServiceDesc is the grpc.ServiceDesc for Snowflake service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Snowflake_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.snowflake.v1.Snowflake",
	HandlerType: (*SnowflakeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSnowflake",
			Handler:    _Snowflake_CreateSnowflake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/snowflake/snowflake/v1/snowflake.proto",
}
