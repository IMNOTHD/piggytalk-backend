// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: api/event/v1/event_stream.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventStreamClient is the client API for EventStream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventStreamClient interface {
	EventStream(ctx context.Context, opts ...grpc.CallOption) (EventStream_EventStreamClient, error)
}

type eventStreamClient struct {
	cc grpc.ClientConnInterface
}

func NewEventStreamClient(cc grpc.ClientConnInterface) EventStreamClient {
	return &eventStreamClient{cc}
}

func (c *eventStreamClient) EventStream(ctx context.Context, opts ...grpc.CallOption) (EventStream_EventStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &EventStream_ServiceDesc.Streams[0], "/gateway.api.event.v1.EventStream/EventStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &eventStreamEventStreamClient{stream}
	return x, nil
}

type EventStream_EventStreamClient interface {
	Send(*EventStreamRequest) error
	Recv() (*EventStreamResponse, error)
	grpc.ClientStream
}

type eventStreamEventStreamClient struct {
	grpc.ClientStream
}

func (x *eventStreamEventStreamClient) Send(m *EventStreamRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *eventStreamEventStreamClient) Recv() (*EventStreamResponse, error) {
	m := new(EventStreamResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStreamServer is the server API for EventStream service.
// All implementations must embed UnimplementedEventStreamServer
// for forward compatibility
type EventStreamServer interface {
	EventStream(EventStream_EventStreamServer) error
	mustEmbedUnimplementedEventStreamServer()
}

// UnimplementedEventStreamServer must be embedded to have forward compatible implementations.
type UnimplementedEventStreamServer struct {
}

func (UnimplementedEventStreamServer) EventStream(EventStream_EventStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method EventStream not implemented")
}
func (UnimplementedEventStreamServer) mustEmbedUnimplementedEventStreamServer() {}

// UnsafeEventStreamServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventStreamServer will
// result in compilation errors.
type UnsafeEventStreamServer interface {
	mustEmbedUnimplementedEventStreamServer()
}

func RegisterEventStreamServer(s grpc.ServiceRegistrar, srv EventStreamServer) {
	s.RegisterService(&EventStream_ServiceDesc, srv)
}

func _EventStream_EventStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EventStreamServer).EventStream(&eventStreamEventStreamServer{stream})
}

type EventStream_EventStreamServer interface {
	Send(*EventStreamResponse) error
	Recv() (*EventStreamRequest, error)
	grpc.ServerStream
}

type eventStreamEventStreamServer struct {
	grpc.ServerStream
}

func (x *eventStreamEventStreamServer) Send(m *EventStreamResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *eventStreamEventStreamServer) Recv() (*EventStreamRequest, error) {
	m := new(EventStreamRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// EventStream_ServiceDesc is the grpc.ServiceDesc for EventStream service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventStream_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gateway.api.event.v1.EventStream",
	HandlerType: (*EventStreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EventStream",
			Handler:       _EventStream_EventStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/event/v1/event_stream.proto",
}
