// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.1
// source: internal/api/account/relation/v1/friend_relation.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FriendRelationClient is the client API for FriendRelation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendRelationClient interface {
	CreateFriendRelation(ctx context.Context, in *CreateFriendRelationRequest, opts ...grpc.CallOption) (*CreateFriendRelationReply, error)
	// 双向删除
	DeleteFriendRelation(ctx context.Context, in *DeleteFriendRelationRequest, opts ...grpc.CallOption) (*DeleteFriendRelationReply, error)
	ListFriendRelation(ctx context.Context, in *ListFriendRelationRequest, opts ...grpc.CallOption) (*ListFriendRelationReply, error)
}

type friendRelationClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendRelationClient(cc grpc.ClientConnInterface) FriendRelationClient {
	return &friendRelationClient{cc}
}

func (c *friendRelationClient) CreateFriendRelation(ctx context.Context, in *CreateFriendRelationRequest, opts ...grpc.CallOption) (*CreateFriendRelationReply, error) {
	out := new(CreateFriendRelationReply)
	err := c.cc.Invoke(ctx, "/account.api.relation.v1.FriendRelation/CreateFriendRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendRelationClient) DeleteFriendRelation(ctx context.Context, in *DeleteFriendRelationRequest, opts ...grpc.CallOption) (*DeleteFriendRelationReply, error) {
	out := new(DeleteFriendRelationReply)
	err := c.cc.Invoke(ctx, "/account.api.relation.v1.FriendRelation/DeleteFriendRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *friendRelationClient) ListFriendRelation(ctx context.Context, in *ListFriendRelationRequest, opts ...grpc.CallOption) (*ListFriendRelationReply, error) {
	out := new(ListFriendRelationReply)
	err := c.cc.Invoke(ctx, "/account.api.relation.v1.FriendRelation/ListFriendRelation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendRelationServer is the server API for FriendRelation service.
// All implementations must embed UnimplementedFriendRelationServer
// for forward compatibility
type FriendRelationServer interface {
	CreateFriendRelation(context.Context, *CreateFriendRelationRequest) (*CreateFriendRelationReply, error)
	// 双向删除
	DeleteFriendRelation(context.Context, *DeleteFriendRelationRequest) (*DeleteFriendRelationReply, error)
	ListFriendRelation(context.Context, *ListFriendRelationRequest) (*ListFriendRelationReply, error)
	mustEmbedUnimplementedFriendRelationServer()
}

// UnimplementedFriendRelationServer must be embedded to have forward compatible implementations.
type UnimplementedFriendRelationServer struct {
}

func (UnimplementedFriendRelationServer) CreateFriendRelation(context.Context, *CreateFriendRelationRequest) (*CreateFriendRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFriendRelation not implemented")
}
func (UnimplementedFriendRelationServer) DeleteFriendRelation(context.Context, *DeleteFriendRelationRequest) (*DeleteFriendRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFriendRelation not implemented")
}
func (UnimplementedFriendRelationServer) ListFriendRelation(context.Context, *ListFriendRelationRequest) (*ListFriendRelationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFriendRelation not implemented")
}
func (UnimplementedFriendRelationServer) mustEmbedUnimplementedFriendRelationServer() {}

// UnsafeFriendRelationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendRelationServer will
// result in compilation errors.
type UnsafeFriendRelationServer interface {
	mustEmbedUnimplementedFriendRelationServer()
}

func RegisterFriendRelationServer(s grpc.ServiceRegistrar, srv FriendRelationServer) {
	s.RegisterService(&FriendRelation_ServiceDesc, srv)
}

func _FriendRelation_CreateFriendRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateFriendRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendRelationServer).CreateFriendRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.api.relation.v1.FriendRelation/CreateFriendRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendRelationServer).CreateFriendRelation(ctx, req.(*CreateFriendRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendRelation_DeleteFriendRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFriendRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendRelationServer).DeleteFriendRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.api.relation.v1.FriendRelation/DeleteFriendRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendRelationServer).DeleteFriendRelation(ctx, req.(*DeleteFriendRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FriendRelation_ListFriendRelation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFriendRelationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendRelationServer).ListFriendRelation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account.api.relation.v1.FriendRelation/ListFriendRelation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendRelationServer).ListFriendRelation(ctx, req.(*ListFriendRelationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendRelation_ServiceDesc is the grpc.ServiceDesc for FriendRelation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendRelation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account.api.relation.v1.FriendRelation",
	HandlerType: (*FriendRelationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFriendRelation",
			Handler:    _FriendRelation_CreateFriendRelation_Handler,
		},
		{
			MethodName: "DeleteFriendRelation",
			Handler:    _FriendRelation_DeleteFriendRelation_Handler,
		},
		{
			MethodName: "ListFriendRelation",
			Handler:    _FriendRelation_ListFriendRelation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/api/account/relation/v1/friend_relation.proto",
}
